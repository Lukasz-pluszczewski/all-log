{"version":3,"file":"all-log.js","sources":["../src/config.js","../src/index.js"],"sourcesContent":["export const ITERABLE_OPTIONS = {\n  array: {\n    keyQuotation: '',\n    openingBrackets: '[',\n    closingBrackets: ']',\n    type: '',\n    showKey: true,\n  },\n  object: {\n    keyQuotation: `'`,\n    openingBrackets: '{',\n    closingBrackets: '}',\n    type: '',\n    showKey: true,\n  },\n  map: {\n    keyQuotation: `'`,\n    openingBrackets: '{',\n    closingBrackets: '}',\n    type: 'Map',\n    showKey: true,\n  },\n  weakMap: {\n    keyQuotation: `'`,\n    openingBrackets: '{',\n    closingBrackets: '}',\n    type: 'WeakMap',\n    showKey: true,\n  },\n  set: {\n    keyQuotation: '',\n    openingBrackets: '[',\n    closingBrackets: ']',\n    type: 'Set',\n    showKey: false,\n  },\n  weakSet: {\n    keyQuotation: '',\n    openingBrackets: '[',\n    closingBrackets: ']',\n    type: 'WeakSet',\n    showKey: false,\n  },\n};\n\nexport const LEVEL_PADDING = 4;\nexport const INDENTATION_SPACES_REGEX = /^[ ]*/;\nexport const STACKTRACE_PATH_REGEX = /(\\/.+?):(\\d+):(\\d)/;\n\nexport const ERROR_MESSAGES = {\n  timerNameRequired: 'Timer must have name to measure time',\n};\n","import isUndefined from 'lodash/isUndefined';\nimport isNull from 'lodash/isNull';\nimport isNaN from 'lodash/isNaN';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isSymbol from 'lodash/isSymbol';\nimport isMap from 'lodash/isMap';\nimport isWeakMap from 'lodash/isWeakMap';\nimport isSet from 'lodash/isSet';\nimport isWeakSet from 'lodash/isWeakSet';\nimport isFunction from 'lodash/isFunction';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isArray from 'lodash/isArray';\nimport isRegExp from 'lodash/isRegExp';\nimport reduce from 'lodash/reduce';\nimport forEach from 'lodash/forEach';\nimport times from 'lodash/times';\nimport entries from 'lodash/entries';\nimport fromPairs from 'lodash/fromPairs';\nimport size from 'lodash/size';\nimport path from 'path';\nimport chalk from 'chalk';\n\nimport {\n  STACKTRACE_PATH_REGEX,\n  LEVEL_PADDING,\n  INDENTATION_SPACES_REGEX,\n  ITERABLE_OPTIONS,\n  ERROR_MESSAGES,\n} from './config';\n\nconst getSpaces = numberOfSpaces => times(numberOfSpaces, () => ' ').join('');\n\nconst indent = (numberOfSpaces, force = false) => (value = '') => {\n  const spaces = getSpaces(numberOfSpaces);\n  if (force) {\n    const minimalIndentation = reduce(value.split('\\n'), (minimalIndentation, line) => {\n      if (!line || !line.replace(' ', '')) {\n        return minimalIndentation;\n      }\n      const indentation = INDENTATION_SPACES_REGEX.exec(line)[0].split('').length;\n      if (minimalIndentation === null || minimalIndentation > indentation) {\n        return indentation;\n      }\n      return minimalIndentation;\n    }, null);\n    return `${value.replace(new RegExp(`^${getSpaces(minimalIndentation)}`, 'gm'), spaces)}`;\n  }\n  return `${value.replace(/^/gm, spaces)}`;\n};\n\nconst getNumberOfSpacesByLevel = level => (level + 1) * LEVEL_PADDING;\n\nconst getPadding = level => getSpaces(getNumberOfSpacesByLevel(level));\n\nconst getPrimitiveValue = (value, level, noPaddingOnZeroLevel) => {\n  if (isUndefined(value)) {\n    return 'undefined';\n  }\n  if (isNull(value)) {\n    return 'null';\n  }\n  if (isNaN(value)) {\n    return 'NaN';\n  }\n  if (isString(value)) {\n    return `'${value}'`;\n  }\n  if (isNumber(value)) {\n    return `${value}`;\n  }\n  if (isFunction(value)) {\n    const padding = !(noPaddingOnZeroLevel && level <= 0);\n    const [firstLine, ...restLines] = value.toString().split('\\n');\n    const intendFunc = indent(padding ? getNumberOfSpacesByLevel(level + 1) : 0, true);\n    const funcString = [intendFunc(firstLine), intendFunc(restLines.join('\\n'))].join('\\n');\n    return `${padding ? '\\n' : ''}${funcString}${padding ? '\\n' : ''}`;\n  }\n  if (isSymbol(value) || isRegExp(value)) {\n    return value.toString();\n  }\n  return value;\n};\n\nconst getIterable = value => {\n  if (isArray(value)) {\n    return {\n      ...ITERABLE_OPTIONS.array,\n      iterable: value,\n    };\n  } else if (isPlainObject(value)) {\n    return {\n      ...ITERABLE_OPTIONS.object,\n      iterable: value,\n    };\n  } else if (isMap(value)) {\n    return {\n      ...ITERABLE_OPTIONS.map,\n      iterable: fromPairs(entries(value)),\n    };\n  } else if (isWeakMap(value)) {\n    // I din't figure out how to iterate over weakMap instance\n    return {\n      ...ITERABLE_OPTIONS.weakMap,\n      iterable: false,\n    };\n  } else if (isSet(value)) {\n    return {\n      ...ITERABLE_OPTIONS.set,\n      iterable: entries(value).map(el => el[0]),\n    };\n  } else if (isWeakSet(value)) {\n    // I din't figure out how to iterate over weakSet instance\n    return {\n      ...ITERABLE_OPTIONS.weakSet,\n      iterable: false,\n    };\n  }\n\n  return false;\n};\n\nexport const getString = (value, level = 0) => {\n  let dumpedText = '';\n  const iterable = getIterable(value);\n\n  if (iterable) {\n    if (!iterable.iterable) {\n      dumpedText += `${iterable.type ? `[${iterable.type}]` : ''}\\n`;\n    } else if (!size(iterable.iterable)) {\n      dumpedText += `${iterable.type ? `[${iterable.type}] ` : ''}${iterable.openingBrackets}${iterable.closingBrackets}\\n`;\n    } else {\n      dumpedText += `${iterable.type ? `[${iterable.type}] ` : ''}${iterable.openingBrackets}\\n`;\n      forEach(iterable.iterable, (subValue, key) => {\n        const subIterable = getIterable(subValue);\n        if (subIterable) {\n          dumpedText += getPadding(level) + `${iterable.keyQuotation}${key}${iterable.keyQuotation}: `;\n          dumpedText += getString(subValue, level + 1);\n        } else {\n          dumpedText += `${getPadding(level)}${iterable.keyQuotation}${key}${iterable.keyQuotation}: ${getPrimitiveValue(subValue, level)}\\n`;\n        }\n      });\n      dumpedText += `${getPadding(level - 1)}${iterable.closingBrackets}\\n`;\n    }\n  } else {\n    dumpedText = `${getPrimitiveValue(value, level, true)}${level ? '' : '\\n'}`;\n  }\n  return dumpedText;\n};\n\nconst getCaller = (stackLevel = 3) => {\n  const error = new Error();\n  const callerPath = error.stack.split('\\n')[stackLevel];\n  const stackMatch = STACKTRACE_PATH_REGEX.exec(callerPath);\n  if (stackMatch) {\n    const [match, absoluteCallerPath, callerLine, callerColumn] = stackMatch;\n    const relativeCallerPath = process.cwd() ? path.relative(process.cwd(), absoluteCallerPath) : absoluteCallerPath;\n    return { match, absoluteCallerPath, callerLine, callerColumn, relativeCallerPath };\n  }\n  return false;\n};\n\nconst log = (...args) => {\n  const caller = getCaller();\n  console.log(caller && chalk.gray.underline(`${caller.relativeCallerPath}:${caller.callerLine}:${caller.callerColumn}\\n`)); // eslint-disable-line no-console\n  const stringifiedValues = args.map(arg => getString(arg));\n  return console.log(stringifiedValues.join('\\n')); // eslint-disable-line no-console\n};\n\nexport const getTimer = () => {\n  const timers = {};\n  const setGetTime = name => {\n    if (!name) {\n      log(ERROR_MESSAGES.timerNameRequired);\n      return ERROR_MESSAGES.timerNameRequired;\n    }\n    if (timers[name]) {\n      timers[name] = {\n        ...timers[name],\n        last: process.hrtime(),\n        totalDuration: process.hrtime(timers[name].start),\n        lastDuration: process.hrtime(timers[name].last),\n      };\n    } else {\n      const time = process.hrtime();\n      timers[name] = {\n        start: time,\n        last: time,\n        totalDuration: null,\n        lastDuration: null,\n      };\n    }\n    return timers[name];\n  };\n  const formatTime = (time, humanReadable = true) => {\n    if (!time) {\n      return time;\n    }\n    const seconds = time[0];\n    const miliseconds = time[1] / 1000000;\n    if (humanReadable) {\n      return `${seconds}s ${miliseconds}ms`;\n    }\n    return { s: seconds, ms: miliseconds };\n  };\n  const formatTimes = (times, humanReadable = true) => {\n    if (!times) {\n      return times;\n    }\n    return {\n      start: formatTime(times.start, humanReadable),\n      last: formatTime(times.last, humanReadable),\n      totalDuration: formatTime(times.totalDuration, humanReadable),\n      lastDuration: formatTime(times.lastDuration, humanReadable),\n    };\n  };\n  const timeLog = (name, tag, ...args) => {\n    console.log(chalk.blue.underline(`${name}${tag ? `:${tag}` : ''}`)); // eslint-disable-line no-console\n    return console.log(args.join('\\n'), '\\n'); // eslint-disable-line no-console\n  };\n\n  return {\n    getTime(name, humanReadable = false) {\n      return formatTimes(timers[name], humanReadable);\n    },\n    time(name) {\n      const time = setGetTime(name);\n      return formatTimes(time, false);\n    },\n    logTime(name, tag = '') {\n      const time = setGetTime(name);\n      timeLog(name, tag, formatTime(time.lastDuration, true), `Total: ${formatTime(time.totalDuration, true)}`);\n      return time;\n    },\n  };\n};\n\nexport default log;\n"],"names":["ITERABLE_OPTIONS","LEVEL_PADDING","INDENTATION_SPACES_REGEX","STACKTRACE_PATH_REGEX","ERROR_MESSAGES","getSpaces","times","numberOfSpaces","join","indent","force","value","spaces","minimalIndentation","reduce","split","line","replace","indentation","exec","length","RegExp","getNumberOfSpacesByLevel","level","getPadding","getPrimitiveValue","noPaddingOnZeroLevel","isUndefined","isNull","isNaN","isString","isNumber","isFunction","padding","toString","firstLine","restLines","intendFunc","funcString","isSymbol","isRegExp","getIterable","isArray","array","isPlainObject","object","isMap","map","fromPairs","entries","isWeakMap","weakMap","isSet","set","el","isWeakSet","weakSet","getString","dumpedText","iterable","type","size","openingBrackets","closingBrackets","subValue","key","subIterable","keyQuotation","getCaller","stackLevel","error","Error","callerPath","stack","stackMatch","match","absoluteCallerPath","callerLine","callerColumn","relativeCallerPath","process","cwd","path","relative","log","args","caller","chalk","gray","underline","stringifiedValues","arg","console","getTimer","timers","setGetTime","name","timerNameRequired","hrtime","start","last","time","formatTime","humanReadable","seconds","miliseconds","s","ms","formatTimes","totalDuration","lastDuration","timeLog","tag","blue"],"mappings":"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"}