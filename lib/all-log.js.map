{"version":3,"file":"all-log.js","sources":["../src/config.js","../src/index.js"],"sourcesContent":["export const ITERABLE_OPTIONS = {\n  array: {\n    keyQuotation: '',\n    openingBrackets: '[',\n    closingBrackets: ']',\n    type: '',\n    showKey: true,\n  },\n  object: {\n    keyQuotation: `'`,\n    openingBrackets: '{',\n    closingBrackets: '}',\n    type: '',\n    showKey: true,\n  },\n  map: {\n    keyQuotation: `'`,\n    openingBrackets: '{',\n    closingBrackets: '}',\n    type: 'Map',\n    showKey: true,\n  },\n  weakMap: {\n    keyQuotation: `'`,\n    openingBrackets: '{',\n    closingBrackets: '}',\n    type: 'WeakMap',\n    showKey: true,\n  },\n  set: {\n    keyQuotation: '',\n    openingBrackets: '[',\n    closingBrackets: ']',\n    type: 'Set',\n    showKey: false,\n  },\n  weakSet: {\n    keyQuotation: '',\n    openingBrackets: '[',\n    closingBrackets: ']',\n    type: 'WeakSet',\n    showKey: false,\n  },\n};\n\nexport const LEVEL_PADDING = 4;\nexport const INDENTATION_SPACES_REGEX = /^[ ]*/;\nexport const STACKTRACE_PATH_REGEX = /(\\/.+?):(\\d+):(\\d)/;\n","import isUndefined from 'lodash/isUndefined';\nimport isNull from 'lodash/isNull';\nimport isNaN from 'lodash/isNaN';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isSymbol from 'lodash/isSymbol';\nimport isMap from 'lodash/isMap';\nimport isWeakMap from 'lodash/isWeakMap';\nimport isSet from 'lodash/isSet';\nimport isWeakSet from 'lodash/isWeakSet';\nimport isFunction from 'lodash/isFunction';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isArray from 'lodash/isArray';\nimport isRegExp from 'lodash/isRegExp';\nimport reduce from 'lodash/reduce';\nimport forEach from 'lodash/forEach';\nimport times from 'lodash/times';\nimport entries from 'lodash/entries';\nimport fromPairs from 'lodash/fromPairs';\nimport size from 'lodash/size';\nimport path from 'path';\nimport chalk from 'chalk';\n\nimport { STACKTRACE_PATH_REGEX, LEVEL_PADDING, INDENTATION_SPACES_REGEX, ITERABLE_OPTIONS } from './config';\n\nconst getSpaces = numberOfSpaces => times(numberOfSpaces, () => ' ').join('');\n\nconst indent = (numberOfSpaces, force = false) => (value = '') => {\n  const spaces = getSpaces(numberOfSpaces);\n  if (force) {\n    const minimalIndentation = reduce(value.split('\\n'), (minimalIndentation, line) => {\n      if (!line || !line.replace(' ', '')) {\n        return minimalIndentation;\n      }\n      const indentation = INDENTATION_SPACES_REGEX.exec(line)[0].split('').length;\n      if (minimalIndentation === null || minimalIndentation > indentation) {\n        return indentation;\n      }\n      return minimalIndentation;\n    }, null);\n    return `${value.replace(new RegExp(`^${getSpaces(minimalIndentation)}`, 'gm'), spaces)}`;\n  }\n  return `${value.replace(/^/gm, spaces)}`;\n};\n\nconst getNumberOfSpacesByLevel = level => (level + 1) * LEVEL_PADDING;\n\nconst getPadding = level => getSpaces(getNumberOfSpacesByLevel(level));\n\nconst getPrimitiveValue = (value, level) => {\n  if (isUndefined(value)) {\n    return 'undefined';\n  }\n  if (isNull(value)) {\n    return 'null';\n  }\n  if (isNaN(value)) {\n    return 'NaN';\n  }\n  if (isString(value)) {\n    return `'${value}'`;\n  }\n  if (isNumber(value)) {\n    return `${value}`;\n  }\n  if (isFunction(value)) {\n    const [firstLine, ...restLines] = value.toString().split('\\n');\n    const intendFunc = indent(level ? getNumberOfSpacesByLevel(level + 1) : 0, true);\n    const funcString = [intendFunc(firstLine), intendFunc(restLines.join('\\n'))].join('\\n');\n    return `${level ? '\\n' : ''}${funcString}${level ? '\\n' : ''}`;\n  }\n  if (isSymbol(value) || isRegExp(value)) {\n    return value.toString();\n  }\n  return value;\n};\n\nconst getIterable = value => {\n  if (isArray(value)) {\n    return {\n      ...ITERABLE_OPTIONS.array,\n      iterable: value,\n    };\n  } else if (isPlainObject(value)) {\n    return {\n      ...ITERABLE_OPTIONS.object,\n      iterable: value,\n    };\n  } else if (isMap(value)) {\n    return {\n      ...ITERABLE_OPTIONS.map,\n      iterable: fromPairs(entries(value)),\n    };\n  } else if (isWeakMap(value)) {\n    // I din't figure out how to iterate over weakMap instance\n    return {\n      ...ITERABLE_OPTIONS.weakMap,\n      iterable: false,\n    };\n  } else if (isSet(value)) {\n    return {\n      ...ITERABLE_OPTIONS.set,\n      iterable: entries(value).map(el => el[0]),\n    };\n  } else if (isWeakSet(value)) {\n    // I din't figure out how to iterate over weakSet instance\n    return {\n      ...ITERABLE_OPTIONS.weakSet,\n      iterable: false,\n    };\n  }\n\n  return false;\n};\n\nexport const getString = (value, level = 0) => {\n  let dumpedText = '';\n  const iterable = getIterable(value);\n\n  if (iterable) {\n    if (!iterable.iterable) {\n      dumpedText += `${iterable.type ? `[${iterable.type}]` : ''}\\n`;\n    } else if (!size(iterable.iterable)) {\n      dumpedText += `${iterable.type ? `[${iterable.type}] ` : ''}${iterable.openingBrackets}${iterable.closingBrackets}\\n`;\n    } else {\n      dumpedText += `${iterable.type ? `[${iterable.type}] ` : ''}${iterable.openingBrackets}\\n`;\n      forEach(iterable.iterable, (subValue, key) => {\n        const subIterable = getIterable(subValue);\n        if (subIterable) {\n          dumpedText += getPadding(level) + `${iterable.keyQuotation}${key}${iterable.keyQuotation}: `;\n          dumpedText += getString(subValue, level + 1);\n        } else {\n          dumpedText += `${getPadding(level)}${iterable.keyQuotation}${key}${iterable.keyQuotation}: ${getPrimitiveValue(subValue, level)}\\n`;\n        }\n      });\n      dumpedText += `${getPadding(level - 1)}${iterable.closingBrackets}\\n`;\n    }\n  } else {\n    dumpedText = `${getPrimitiveValue(value, level)}${level ? '' : '\\n'}`;\n  }\n  return dumpedText;\n};\n\nconst getCaller = () => {\n  const error = new Error();\n  const callerPath = error.stack.split('\\n')[3];\n  const stackMatch = STACKTRACE_PATH_REGEX.exec(callerPath);\n  if (stackMatch) {\n    const [match, absoluteCallerPath, callerLine, callerColumn] = stackMatch;\n    const relativeCallerPath = process.cwd() ? path.relative(process.cwd(), absoluteCallerPath) : absoluteCallerPath;\n    return { match, absoluteCallerPath, callerLine, callerColumn, relativeCallerPath };\n  }\n  return false;\n};\n\nconst log = (...args) => {\n  const caller = getCaller();\n  console.log(caller && chalk.gray.underline(`${caller.relativeCallerPath}:${caller.callerLine}:${caller.callerColumn}\\n`)); // eslint-disable-line no-console\n  const stringifiedValues = args.map(arg => getString(arg));\n  return console.log(stringifiedValues.join('\\n')); // eslint-disable-line no-console\n};\n\nexport default log;\n"],"names":["ITERABLE_OPTIONS","LEVEL_PADDING","INDENTATION_SPACES_REGEX","STACKTRACE_PATH_REGEX","getSpaces","times","numberOfSpaces","join","indent","force","value","spaces","minimalIndentation","reduce","split","line","replace","indentation","exec","length","RegExp","getNumberOfSpacesByLevel","level","getPadding","getPrimitiveValue","isUndefined","isNull","isNaN","isString","isNumber","isFunction","toString","firstLine","restLines","intendFunc","funcString","isSymbol","isRegExp","getIterable","isArray","array","isPlainObject","object","isMap","map","fromPairs","entries","isWeakMap","weakMap","isSet","set","el","isWeakSet","weakSet","getString","dumpedText","iterable","type","size","openingBrackets","closingBrackets","subValue","key","subIterable","keyQuotation","getCaller","error","Error","callerPath","stack","stackMatch","match","absoluteCallerPath","callerLine","callerColumn","relativeCallerPath","process","cwd","path","relative","log","args","caller","chalk","gray","underline","stringifiedValues","arg","console"],"mappings":"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"}